version: "3.8"

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: soulheads-api
    ports:
      - "${PORT:-5000}:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - MONGO_URI=${MONGO_URI}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mongo
    networks:
      - app-network

  mongo:
    image: mongo:6
    container_name: soulheads-mongo
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-mongodb}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
    restart: unless-stopped
    command: ["--auth"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: soulheads-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certbot/conf:/etc/nginx/ssl
      - ./nginx/certbot/data:/var/www/certbot
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped

  # SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: soulheads-certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/data:/var/www/certbot
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${ADMIN_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - prod

volumes:
  mongo-data:
    driver: local

networks:
  app-network:
    driver: bridge
